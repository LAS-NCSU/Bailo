worker_processes 1;
 
events { worker_connections 1024; }

http {
    upstream host_service {
       server app:3000;
    }

    sendfile on;

    map $email $req_userid {                                                 
        default   "";
        ~(?<user_id>.*)@.*ncsu.edu   $user_id;                                               

        # default   $email;                                               
        # ""        "user";                                                      
    }

    map $http_remote_user $req_email {
        default $http_remote_user;
    }

    map $upstream_http_www_authenticate $new_www_authenticate {
        ~(?<pre_auth>.*realm=")(.*?)(?<post_auth>\/api\/v1\/registry_auth".*)   "$pre_auth$scheme://$host:$server_port$post_auth";
        default "";
    }

    server {
        listen 80;
        server_name bailo-public.ncsu-las.net;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }    
    }

    ## Set a variable to help us decide if we need to add the
    ## 'Docker-Distribution-Api-Version' header.
    ## The registry always sets this header.
    ## In the case of nginx performing auth, the header is unset
    ## since nginx is auth-ing before proxying.
    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        '' 'registry/2.0';
    }

    server {
        listen 443 ssl;
        server_name bailo-public.ncsu-las.net;
        
        ssl_certificate /etc/letsencrypt/live/bailo-public.ncsu-las.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/bailo-public.ncsu-las.net/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        client_max_body_size 4G;

        location /oauth2/ {
            proxy_pass       http://ouath2-proxy:4180;
            proxy_set_header Host                    $host;
            proxy_set_header X-Real-IP               $remote_addr;
            proxy_set_header X-Scheme                $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
        }
        location = /oauth2/auth {
            proxy_pass       http://ouath2-proxy:4180;
            proxy_set_header Host             $host;
            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header X-Scheme         $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            # nginx auth_request includes headers but not body
            proxy_set_header Content-Length   "";
            proxy_pass_request_body           off;
        }

        location /api/v1/registry_auth {
            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            # if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
            #     return 404;
            # }
            # client_body_in_file_only on;

            proxy_hide_header WWW-Authenticate;
            add_header WWW-Authenticate $new_www_authenticate always;
            proxy_pass_header Authorization;

            ## If $docker_distribution_api_version is empty, the header is not added.
            ## See the map directive above where this variable is defined.
            # add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_read_timeout 900;

            client_max_body_size 0;
            chunked_transfer_encoding on;
            proxy_pass         http://host_service;
        }

        location / {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in; 

            # a bunch of boilerplate proxy configuration
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            #Typical ways to get data from upstream
            auth_request_set $email  $upstream_http_x_auth_request_email;
            #proxy_set_header REMOTE_USER $email;
            auth_request_set $user   $upstream_http_x_auth_request_user;
            #proxy_set_header X-User  $user;

            proxy_set_header X-Insecure "true";
            proxy_set_header X-UserId $req_userid;
            proxy_set_header X-Email $email;
            proxy_set_header X-User '{"some":"data"}';

            client_max_body_size 0;
            chunked_transfer_encoding on;

            # the real magic is here where we forward requests to the address that the Node.js server is running on
            proxy_pass http://host_service;
        }
        
        location /v2 {
            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                return 404;
            }

            proxy_hide_header WWW-Authenticate;
            add_header WWW-Authenticate $new_www_authenticate always;

            ## If $docker_distribution_api_version is empty, the header is not added.
            ## See the map directive above where this variable is defined.
            add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_read_timeout 900;

            client_max_body_size 0;
            chunked_transfer_encoding on;
            proxy_pass         https://registry:5000;
        }
    }
}
