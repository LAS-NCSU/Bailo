---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bailo.fullname" . }}-config
  labels:
    {{- include "bailo.labels" . | nindent 4 }}
data:
  production.cjs: |
    module.exports = {
      api: {
        port: {{ .Values.service.backendPort }},
        host: '',
      },
      app: {
        protocol: '{{ .Values.config.app.protocol }}',
        host: '{{ .Values.route.appPublicRoute }}',
        port: {{ .Values.config.app.port }},
        privateKey: '/app/certs/key.pem',
        publicKey: '/app/certs/cert.pem',
      },
      s2i: {
        path: '/s2i/s2i',
      },
      build: {
        environment: '{{ .Values.config.build.environment }}',
        openshift: {
          namespace: '{{ .Values.openshift.namespace }}',
          dockerPushSecret: '{{ .Values.openshift.dockerPushSecretName }}',
        },
      },
      mongo: {
        uri: 'mongodb://{{ index .Values.mongodb.auth.usernames 0 }}:{{ index .Values.mongodb.auth.passwords 0 }}@{{ include "bailo.mongo.host" . }}',
        connectionOptions: {
          useFindAndModify: false,
          useNewUrlParser: true,
          useUnifiedTopology: true,
          useCreateIndex: true,
          ssl: {{ .Values.mongodb.ssl }},
          sslValidate: {{ .Values.mongodb.sslValidate }},
        },
      },
      minio: {
        connection: {
          endPoint: '{{ include "bailo.minio.host" . }}',
          port: {{ .Values.minio.service.ports.api }},
          useSSL: {{ .Values.minio.useSSL }},
          region: '{{ .Values.minio.region }}',
          },
          automaticallyCreateBuckets: {{ .Values.minio.createBuckets }},
          buckets: {
            uploads: '{{ .Values.minio.uploadBucket }}',
            registry: '{{ .Values.minio.registryBucket }}',
          },
      },
      registry: {
        connection:{ 
          host: '{{ include "bailo.registry.host" . }}:{{ .Values.registry.port }}',
          port: '{{ .Values.registry.port }}',
          protocol: '{{ .Values.registry.protocol }}',
        },
        service: 'RegistryAuth',
        issuer: 'RegistryIssuer',
        insecure: {{ .Values.registry.insecure }},
      },
      smtp: {
        enabled: true,
        connection: {
          host: '{{ include "bailo.mail.host" . }}',
          port: {{ .Values.config.smtp.port }},
          secure: {{ .Values.config.smtp.secure }},
          auth: { 
            user: '{{ .Values.config.smtp.user }}', 
            pass: '{{ .Values.config.smtp.pass }}',
          },
          tls: {
            rejectUnauthorized: {{ .Values.config.smtp.rejectUnauthorized }}, 
          },
        },
        from: '{{ .Values.config.smtp.from }}',
      },
      logging: {
        file: {
          enabled: false,
          level: 'info',
          path: './logs/out.log',
        },
        stroom: {
          enabled: {{ .Values.stroom.enabled }},
          folder: '{{ .Values.stroom.folder }}',
          url: '{{ .Values.stroom.url }}',
          feed: '{{ .Values.stroom.feed }}',
          environment: '{{ .Values.stroom.environment }}',
          system: '{{ .Values.stroom.system }}',
          insecure: {{ .Values.stroom.insecure }},
          interval: {{ .Values.stroom.interval }},
        },
      },
      ui: {
        banner: {
          enabled: {{ .Values.config.ui.banner.enabled }},
          text: '{{ .Values.config.ui.banner.text }}',
          colour: '{{ .Values.config.ui.banner.colour }}',
        },
        issues: {
          label: 'Bailo Support Team',
          supportHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Support',
          contactHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Contact',
        },
        registry: {
          host: '{{ .Values.route.appPublicRoute }}',
        },
        uploadWarning: {
          showWarning: true,
          checkboxText: 'By checking here you confirm that the information is correct',
        },
        deploymentWarning: {
          showWarning: true,
          checkboxText: 'By checking here you confirm that the information is correct',
        },
        seldonVersions: [
          {
            name: '{{ .Values.config.s2i.name }}',
            image: '{{ .Values.config.s2i.image }}',
          },
        ],
      },
    }
    
  custom-environment-variables.cjs: |
    module.exports = {
      minio: {
        connection: {
          accessKey: 'MINIO_ACCESS_KEY',
          secretKey: 'MINIO_SECRET_KEY',
        },  
      },
    }
